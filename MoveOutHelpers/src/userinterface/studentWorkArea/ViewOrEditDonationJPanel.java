/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.studentWorkArea;

import StudentSale.CityName;
import StudentSale.CityNetwork;
import StudentSale.EcoSystem;
import StudentSale.CollectionCenter;
import StudentSale.User;
import StudentSale.serviceAgent.ServiceAgent;
import StudentSale.deliveryAgent.DeliveryAgent;
import StudentSale.std.Donation;
import StudentSale.std.Student;
import StudentSale.enums.Category;
import StudentSale.enums.DonationStatus;
import StudentSale.enums.PickUp;
import StudentSale.enums.UsageStatus;
import StudentSale.enums.StudentRole;
import StudentSale.helper.Constants;
import StudentSale.helper.EmailHelper;
import StudentSale.helper.PhoneNoHelper;
import StudentSale.helper.UserNameHelper;
import StudentSale.helper.ValidateInputs;
import StudentSale.organization.OrganizationManager;
import StudentSale.organization.Organization;
import StudentSale.sysAdmin.SysAdmin;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.nio.file.Paths;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author sishwathoka
 */
public class ViewOrEditDonationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateSysAdminJPanel
     */
    
    private JPanel userProcessJpanel;
    private EcoSystem ecoSystem;
    private User userLogged;
    private User std;
    private String imagePath;
    private Donation donation;
    private CityNetwork cityNetwork;
    private static final Logger logger = Logger.getLogger(ViewOrEditDonationJPanel.class.getName());
    
    /**
     * Creates new form MakeNewDonationJPanel
     */
    public ViewOrEditDonationJPanel(JPanel userProcessJpanel, EcoSystem ecoSystem, User userLogged, Donation selectedDonation) {
        initComponents();
        this.userProcessJpanel = userProcessJpanel;
        this.ecoSystem = ecoSystem;
        this.userLogged = userLogged;
        this.std = (User) userLogged;
        this.donation = selectedDonation;
        this.imagePath = donation.getPicture();
        lblpicHolder.setSize(126, 139);
        this.cityNetwork = donation.getCityNetwork();
        
        populateCategories();
        populateCities();
        populatePickUpMode();
        populateUsageStatus();
        populateFields();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usageStatusCmbx = new javax.swing.JComboBox<>();
        pickUpModeLbl = new javax.swing.JLabel();
        pickupModeCmbBx = new javax.swing.JComboBox<>();
        selectCollCenterLbl = new javax.swing.JLabel();
        selectfCmbBx = new javax.swing.JComboBox<>();
        txtpickupadd = new javax.swing.JTextField();
        lblpickupadd = new javax.swing.JLabel();
        lbldateOfExpiry = new javax.swing.JLabel();
        infoLbl = new javax.swing.JLabel();
        headerLbl = new javax.swing.JLabel();
        txtinfor = new javax.swing.JTextField();
        lblcity = new javax.swing.JLabel();
        donationcategoryjComboBox = new javax.swing.JComboBox<>();
        btnupdatedonationrequest = new javax.swing.JButton();
        lbldonationCategory = new javax.swing.JLabel();
        lblpicHolder = new javax.swing.JLabel();
        lblusagestatus = new javax.swing.JLabel();
        uploadjButton = new javax.swing.JButton();
        cityjComboBox = new javax.swing.JComboBox<>();
        dateofexpiryDATECHOOSER = new com.toedter.calendar.JDateChooser();
        backjButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(javax.swing.UIManager.getDefaults().getColor("SlidingButton.selectedBackground"));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        add(usageStatusCmbx, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 140, 179, 40));

        pickUpModeLbl.setText("PickUp Mode:");
        add(pickUpModeLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 140, 118, 40));

        pickupModeCmbBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupModeCmbBxActionPerformed(evt);
            }
        });
        add(pickupModeCmbBx, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 140, 179, 40));

        selectCollCenterLbl.setText("Select Bank:");
        add(selectCollCenterLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 118, 40));

        add(selectfCmbBx, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 200, 179, 40));

        txtpickupadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpickupaddActionPerformed(evt);
            }
        });
        add(txtpickupadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 260, 179, 40));

        lblpickupadd.setText("PickUp Address:");
        add(lblpickupadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 260, 118, 40));

        lbldateOfExpiry.setText("Date of Expiry:");
        add(lbldateOfExpiry, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 256, 118, 40));

        infoLbl.setText("Information:");
        add(infoLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 198, 118, 40));

        headerLbl.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        headerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLbl.setText("View / Edit Student's Donation");
        add(headerLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 13, 310, 34));
        add(txtinfor, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 198, 179, 40));

        lblcity.setText("City:");
        add(lblcity, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, 118, 40));

        donationcategoryjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donationcategoryjComboBoxActionPerformed(evt);
            }
        });
        add(donationcategoryjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 82, 179, 40));

        btnupdatedonationrequest.setText("Update");
        btnupdatedonationrequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdatedonationrequestActionPerformed(evt);
            }
        });
        add(btnupdatedonationrequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 347, 180, -1));

        lbldonationCategory.setText("Donation Category:");
        add(lbldonationCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 82, 118, 40));

        lblpicHolder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblpicHolder.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblpicHolderMouseMoved(evt);
            }
        });
        add(lblpicHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 82, 150, 156));

        lblusagestatus.setText("Usage Status:");
        add(lblusagestatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 140, 118, 40));

        uploadjButton.setText("upload");
        uploadjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadjButtonActionPerformed(evt);
            }
        });
        add(uploadjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(446, 264, -1, -1));

        cityjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityjComboBoxActionPerformed(evt);
            }
        });
        add(cityjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 80, 179, 40));
        add(dateofexpiryDATECHOOSER, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 256, 179, 40));

        backjButton2.setText("< < Back");
        backjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton2ActionPerformed(evt);
            }
        });
        add(backjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bg.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-70, -80, -1, -1));
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void populateCategories() {
        
        donationcategoryjComboBox.removeAllItems();
        String[] categories = Category.getCategoriesArray();
        for(String category:categories) {
            donationcategoryjComboBox.addItem(category);
        }
    }
    
    public void populateUsageStatus() {
        
        usageStatusCmbx.removeAllItems();
        String[] usageStatus = UsageStatus.getUsageStatusArray();
        for(String status:usageStatus) {
            usageStatusCmbx.addItem(status);
        }
    }
    
    public void populateFoodBanks() {
        selectfCmbBx.removeAllItems();
        for(CityNetwork cityNetwork:ecoSystem.getCityNetworkDirectory().getCityNetworks()) {
            if (cityNetwork.getCityName().name().equals(cityjComboBox.getSelectedItem().toString())){
                if (cityNetwork.getFoodBankDirectory()!=null){
                    for(CollectionCenter fb : cityNetwork.getFoodBankDirectory().getFoodBanks()){
                       selectfCmbBx.addItem(fb.getName());
                    }
                }
            }            
        }
    }
    
    public void populatePickUpMode() {
        
        pickupModeCmbBx.removeAllItems();
        String[] modes = PickUp.getPickUpArray();
        for(String mode:modes) {
            pickupModeCmbBx.addItem(mode);
        }
        
        String selectedItem =  pickupModeCmbBx.getSelectedItem().toString();
        if(selectedItem.equalsIgnoreCase("Home")) {
            selectfCmbBx.setEnabled(false);
        }else{
            selectfCmbBx.setEnabled(true);
            
        }
    }
    
    public void populateCities() {
        
        List<CityNetwork> cityNtw = ecoSystem.getCityNetworkDirectory().getCityNetworks();
        cityjComboBox.removeAllItems();
        for(CityNetwork cityNet:ecoSystem.getCityNetworkDirectory().getCityNetworks()) {
            cityjComboBox.addItem(cityNet.getCityName().name());
        }
        
    }
    
    public void populateFields() {
        txtinfor.setText(donation.getInformation());
        donationcategoryjComboBox.setSelectedItem(donation.getCategory().toString());
        usageStatusCmbx.setSelectedItem(donation.getUsageStatus().toString());
        pickupModeCmbBx.setSelectedItem(donation.getPickUp().toString());
        if (donation.getFoodBank()==null){
            txtpickupadd.setText(donation.getAddressToPickUp());
            selectfCmbBx.setEditable(false);
        }else{
            selectfCmbBx.setSelectedItem(donation.getFoodBank().getName());
        }
        cityjComboBox.setSelectedItem(donation.getCityNetwork().getCityName().name());
        
        dateofexpiryDATECHOOSER.setDate(donation.getDateofExpiry());
        
        setPhoto(imagePath);
    }
    
    
    private void btnupdatedonationrequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdatedonationrequestActionPerformed
        if (txtinfor.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "!Error! Please enter some info about the Donation");
            return;
        }
        String info = txtinfor.getText();
        Category category = Category.valueOf(donationcategoryjComboBox.getSelectedItem().toString());
        UsageStatus usageStatus = UsageStatus.valueOf(usageStatusCmbx.getSelectedItem().toString());
        PickUp pickUp = PickUp.valueOf(pickupModeCmbBx.getSelectedItem().toString());
        
        
        int cityNetworkIndex = cityjComboBox.getSelectedIndex();
        if (cityNetworkIndex<0){
            JOptionPane.showMessageDialog(this, "!Error! No City present in the system");
            return;
        }        
        CityNetwork cityNetwork =  ecoSystem.getCityNetworkDirectory().getCityNetworks().get(cityNetworkIndex);
        
        int foodBankIndex=-1;
        CollectionCenter collectionCenter = null;
        if (!pickupModeCmbBx.getSelectedItem().equals("Home")){
            foodBankIndex = selectfCmbBx.getSelectedIndex();
            if(foodBankIndex <0) {
                JOptionPane.showMessageDialog(this, "!Error! No food banks present. Please select different options.");
                return;
            }
            collectionCenter = cityNetwork.getFoodBankDirectory().getFoodBanks().get(foodBankIndex);
        }
        

        
        String addressToPickUp = null;
        if ((PickUp.valueOf(pickupModeCmbBx.getSelectedItem().toString())).equals(PickUp.Home)){
            if (!ValidateInputs.isAddressValid(txtpickupadd.getText())){
                JOptionPane.showMessageDialog(this, "!Error! Address cannot be empty for Home Pickup");
                return;
            }else{
                addressToPickUp = txtpickupadd.getText();
            }
        }else{
            if (collectionCenter!=null){
                addressToPickUp = collectionCenter.getName() + "@" + collectionCenter.getLocation();;
            }
        }

        Date expiryDate = null;
        if(donationcategoryjComboBox.getSelectedItem().toString().equals("Food") || donationcategoryjComboBox.getSelectedItem().toString().equals("Medicines")){
//            dateofexpiryDATECHOOSER.setEnabled(true);
            expiryDate = (Date) dateofexpiryDATECHOOSER.getDate();
        }else{
            dateofexpiryDATECHOOSER.removeAll();
            dateofexpiryDATECHOOSER.setEnabled(false);
        }
        
        DonationStatus ds = DonationStatus.ReadyToPickup;

        if (expiryDate != null){
            if (expiryDate.before(new Date())){
                ds = DonationStatus.Expired;
            }
        }
        
        
        
        donation.setInformation(info);
        donation.setCategory(category);
        donation.setUsageStatus(usageStatus);
        donation.setPickUp(pickUp);
        donation.setFoodBank(collectionCenter);
        donation.setCityNetwork(cityNetwork);
        donation.setAddressToPickUp(addressToPickUp);
        donation.setDateofExpiry(expiryDate);
        donation.setDonationStatus(ds);
        donation.setPicture(imagePath);
        
        JOptionPane.showMessageDialog(this, "Sucessfully updated the Donation request.");
        logger.log(Level.INFO, "Donor request successfully updated.");
    }//GEN-LAST:event_btnupdatedonationrequestActionPerformed

    private void uploadjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadjButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("/"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Jpeg format", "jpeg"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Jpg format", "jpg"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Png format", "png"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            imagePath = selectedFile.getAbsolutePath();
            setPhoto(imagePath);
        }
    }//GEN-LAST:event_uploadjButtonActionPerformed

    private void setPhoto(String imagPath) {
        if(imagPath.equals(Constants.DEFAULT_PROFILE_IMAGE_PATH)) {
            ImageIcon photo = new ImageIcon(getClass().getResource(Constants.DEFAULT_PROFILE_IMAGE_PATH).getPath());
            Image photoResized = photo.getImage().getScaledInstance(lblpicHolder.getWidth(), lblpicHolder.getHeight(),4);
            lblpicHolder.setIcon(new ImageIcon(photoResized));
            return;
        }
 
        ImageIcon photo = new ImageIcon(imagPath);
        Image photoResized = photo.getImage().getScaledInstance(lblpicHolder.getWidth(), lblpicHolder.getHeight(),4);
        lblpicHolder.setIcon(new ImageIcon(photoResized));
    }
    
    private void pickupModeCmbBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupModeCmbBxActionPerformed
        if (((String) pickupModeCmbBx.getSelectedItem()).equals("FoodBank")){
            selectfCmbBx.setEnabled(true);
            txtpickupadd.setText("");
            txtpickupadd.setEnabled(false);
            
            populateFoodBanks();
        }else{
            selectfCmbBx.removeAllItems();
            
            selectfCmbBx.setEnabled(false);
            txtpickupadd.setEnabled(true);
        }
    }//GEN-LAST:event_pickupModeCmbBxActionPerformed

    private void backjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton2ActionPerformed
        // TODO add your handling code here:
        userProcessJpanel.remove(this);

        Component[] components = userProcessJpanel.getComponents();
        ManageMyDonationsJPanel manageMyDonationsJPanel = (ManageMyDonationsJPanel) components[components.length-1];
        manageMyDonationsJPanel.populateDonationHistoryTable();

        CardLayout cardLayout = (CardLayout) userProcessJpanel.getLayout();
        cardLayout.previous(userProcessJpanel);
    }//GEN-LAST:event_backjButton2ActionPerformed

    private void lblpicHolderMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblpicHolderMouseMoved
        if (!donation.getPicture().equals("")){
            setPhoto(imagePath);
        }
    }//GEN-LAST:event_lblpicHolderMouseMoved

    private void cityjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityjComboBoxActionPerformed
        populateFoodBanks();
    }//GEN-LAST:event_cityjComboBoxActionPerformed

    private void donationcategoryjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donationcategoryjComboBoxActionPerformed
        if(donationcategoryjComboBox.getSelectedItem().toString().equals("Food") || donationcategoryjComboBox.getSelectedItem().toString().equals("Medicines")){
            dateofexpiryDATECHOOSER.setEnabled(true);
        }else{
            dateofexpiryDATECHOOSER.setEnabled(false);
        }
    }//GEN-LAST:event_donationcategoryjComboBoxActionPerformed

    private void txtpickupaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpickupaddActionPerformed
        // TODO add your handling code here:
        if( !ValidateInputs.isPasswordValid(txtpickupadd.getText()) ){
                   JOptionPane.showMessageDialog(this, "Enter Address correctly");
       } 
    }//GEN-LAST:event_txtpickupaddActionPerformed


    
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton2;
    private javax.swing.JButton btnupdatedonationrequest;
    private javax.swing.JComboBox<String> cityjComboBox;
    private com.toedter.calendar.JDateChooser dateofexpiryDATECHOOSER;
    private javax.swing.JComboBox<String> donationcategoryjComboBox;
    private javax.swing.JLabel headerLbl;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblcity;
    private javax.swing.JLabel lbldateOfExpiry;
    private javax.swing.JLabel lbldonationCategory;
    private javax.swing.JLabel lblpicHolder;
    private javax.swing.JLabel lblpickupadd;
    private javax.swing.JLabel lblusagestatus;
    private javax.swing.JLabel pickUpModeLbl;
    private javax.swing.JComboBox<String> pickupModeCmbBx;
    private javax.swing.JLabel selectCollCenterLbl;
    private javax.swing.JComboBox<String> selectfCmbBx;
    private javax.swing.JTextField txtinfor;
    private javax.swing.JTextField txtpickupadd;
    private javax.swing.JButton uploadjButton;
    private javax.swing.JComboBox<String> usageStatusCmbx;
    // End of variables declaration//GEN-END:variables
}
